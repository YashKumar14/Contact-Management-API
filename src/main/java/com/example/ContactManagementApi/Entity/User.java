package com.example.ContactManagementApi.Entity;

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;

/**
 * The User class represents an entity for managing user information and
 * authentication. It implements the UserDetails interface from Spring Security
 * to integrate user information for authentication and authorization purposes.
 */
@Entity
public class User implements UserDetails {

	private static final long serialVersionUID = 1L;

	/**
	 * The unique identifier for each user entry. It is auto-generated by the
	 * database using the IDENTITY strategy.
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	/**
	 * The username of the user. This field cannot be null.
	 */
	@Column(nullable = false)
	private String username;

	/**
	 * The password of the user. This field cannot be null.
	 */
	@Column(nullable = false)
	private String password;

	/**
	 * The timestamp for when the user was created. This field is not updatable.
	 */
	@CreationTimestamp
	@Column(updatable = false, name = "created_at")
	private Date createdAt;

	/**
	 * The timestamp for when the user was last updated.
	 */
	@UpdateTimestamp
	@Column(name = "updated_at")
	private Date updatedAt;

	/**
	 * The set of roles associated with the user. This establishes a many-to-many
	 * relationship with the Role entity.
	 */
	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
	private Set<Role> roles = new HashSet<>();

	// UserDetails methods

	/**
	 * Gets the authorities (roles) granted to the user.
	 *
	 * @return a collection of GrantedAuthority representing the user's roles
	 */
	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return getRoles().stream().map(role -> new SimpleGrantedAuthority(role.getName().name()))
				.collect(Collectors.toList());
	}

	@Override
	public String getPassword() {
		return password;
	}

	@Override
	public String getUsername() {
		return username;
	}

	@Override
	public boolean isAccountNonLocked() {
		return true; // Indicates that the account is not locked
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return true; // Indicates that the credentials are not expired
	}

	@Override
	public boolean isEnabled() {
		return true; // Indicates that the account is enabled
	}

	// Getters and Setters

	public Long getId() {
		return id;
	}

	public User setId(Long id) {
		this.id = id;
		return this;
	}

	public User setUsername(String username) {
		this.username = username;
		return this;
	}

	public User setPassword(String password) {
		this.password = password;
		return this;
	}

	public Set<Role> getRoles() {
		return roles;

	}

	public User setRoles(Set<Role> roles) {
		this.roles = roles;
		return this;
	}

}
